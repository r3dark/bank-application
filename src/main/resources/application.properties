server.servlet.contextPath=/bank
server.port=8080
spring.datasource.url=jdbc:h2:mem:db
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=h2
spring.datasource.driverClassName=org.h2.Driver
spring.h2.console.enabled=true
spring.jpa.show-sql=true

#Hibernate can work with different databases. However, databases have proprietary extensions/native SQL variations, and set/sub-set of SQL standard implementations. Therefore at some point hibernate has to use database specific SQL. Hibernate uses "dialect" configuration to know which database you are using so that it can switch to the database specific SQL generator code wherever/whenever necessary.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

#create – Hibernate first drops existing tables, then creates new tables
#update – the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
#create-drop – similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
#validate – Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
#none – this value effectively turns off the DDL generation
spring.jpa.hibernate.ddl-auto=update

#This entry is put just to avoid a warning message in the logs when you start the spring-boot application. This bug is from hibernate which tries to retrieve some metadata from db and failed to find that and logs as a warning. It doesn't cause any issue though.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true